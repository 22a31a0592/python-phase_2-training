# binary tree traversals
"""
class Node:
    def __init__(self,data):
        self.data = data 
        self.right = None
        self.left = None
def inorder_traversel(root):
    if root is not None:
        inorder_traversel(root.left)
        print(root.data,end=" ")
        inorder_traversel(root.right)

def preorder_traversel(root):
    if root is not None:
        print(root.data,end=" ")
        preorder_traversel(root.left)
        preorder_traversel(root.right)

def postorder_traversel(root):
    if root is not None:
        inorder_traversel(root.left)
        inorder_traversel(root.right)
        print(root.data,end=" ")
        

root = Node(5)
root.left =Node(18)
root.right=Node(30)
root.left.left=Node(4)
root.left.right=Node(45)
root.right.left=Node(22)
root.right.right=Node(7)
inorder_traversel(root)
preorder_traversel(root)
postorder_traversel(root)
"""
###  binary search tree
"""
class Node:
    def __init__(self,data):
        self.data = data 
        self.right = None
        self.left = None
class Tree:
    def __init__(self):
        self.root=None

    def insert(self,data):
        self.root=self.rec_insert(self.root,data)

    def rec_insert(self,root,data):
        if root is None:
            return Node(data)
        if root.data<data:
            root.right=self.rec_insert(root.right,data)
        else:
            root.left=self.rec_insert(root.left,data)
        return root

    def inorder_traversal(self,root):
        if root is not None:
            self.inorder_traversal(root.left)
            print(root.data,end=" ")
            self.inorder_traversal(root.right)

    def min_val(self):
        if self.root==None:
            print("not found")
            return 
        cur=self.root
        while cur.left:
            cur=cur.left
        print(f"\n{cur.data}")   
        
    def max_val(self):
        if self.root==None:
            print("not found")
            return 
        cur=self.root
        while cur.right:
            cur=cur.right
        print(cur.data) 



obj=Tree()
obj.insert(20)
obj.insert(10)
obj.insert(7)
obj.insert(27)
obj.insert(34)
obj.insert(3)
obj.insert(9)
obj.insert(25)
obj.insert(18)
obj.inorder_traversal(obj.root)
obj.min_val()
obj.max_val()
"""
####                                     BST deletion
"""
class Node:
    def __init__(self,data):
        self.data=data
        self.right=None
        self.left=None
class Tree:
    def __init__(self):
        self.root=None
 
    def insert(self,data):
        self.root=self.rec_insert(self.root,data)
 
    def rec_insert(self,root,data):
        if root is None:
            return Node(data)
        if root.data<data:
            root.right=self.rec_insert(root.right,data)
        else:
            root.left=self.rec_insert(root.left,data)
        return root
 
    def Max(self,root):
        cur = root
        while cur.right:
            cur=cur.right
        return cur.data

    def inorder_traversal(self,root):
        if root is not None:
            self.inorder_traversal(root.left)
            print(root.data,end=" ")
            self.inorder_traversal(root.right)
 
    def deletion(self,data):
        self.root=self.rec_deletion(self.root,data)
    def rec_deletion(self,root,key):
        if root is None:
            return None

        if root.data<key:
            root.right = self.rec_deletion(root.right,key)
        elif root.data>key:
            root.left = self.rec_deletion(root.left,key)
        else:
 
            if root.left is None:
                return root.right
            if root.right is None:
                return root.left
 
            max = self.Max(root.left)
            root.data=max
            root.left = self.rec_deletion(root.left,max)
        return root   

obj=Tree()
obj.insert(20)
obj.insert(10)
obj.insert(7)
obj.insert(27)
obj.insert(34)
obj.insert(3)
obj.insert(9)
obj.insert(25)
obj.insert(18)
obj.insert(23)
obj.insert(22)
print()
obj.deletion(27)
obj.inorder_traversal(obj.root)"""
#  level order,left view and right view
"""
class Node:
    def __init__(self,data):
        self.data=data
        self.right=None
        self.left=None
class Tree:
    def __init__(self):
        self.root=None
 
    def insert(self,data):
        self.root=self.rec_insert(self.root,data)
 
    def rec_insert(self,root,data):
        if root is None:
            return Node(data)
        if root.data<data:
            root.right=self.rec_insert(root.right,data)
        else:
            root.left=self.rec_insert(root.left,data)
        return root
 
    def Max(self,root):
        cur = root
        while cur.right:
            cur=cur.right
        return cur.data
 
    def inorder_traversal(self,root):
        if root is not None:
            self.inorder_traversal(root.left)
            print(root.data,end=" ")
            self.inorder_traversal(root.right)
 
    def deletion(self,data):
        self.root=self.rec_deletion(self.root,data)
    def rec_deletion(self,root,key):
        if root is None:
            return None
 
        if root.data<key:
            root.right = self.rec_deletion(root.right,key)
        elif root.data>key:
            root.left = self.rec_deletion(root.left,key)
        else:
 
            if root.left is None:
                return root.right
            if root.right is None:
                return root.left
 
            max = self.Max(root.left)
            root.data=max
            root.left = self.rec_deletion(root.left,max)
        return root   
 
    def level_order_traversal(self):
 
        queue = [self.root] # 
        res = []  # [20]  [10,27]
        while queue:
            sub=[] # 10 27
            for i in range(len(queue)): # 2
                temp = queue.pop(0) # 27
                if temp.left:
                    queue.append(temp.left)
                if temp.right:
                    queue.append(temp.right)
                sub.append(temp.data)
            res.append(sub)
        return res
    def left_view(self):
        queue=[self.root]
        res=[]
        while queue:
            n=len(queue)
            for i in range(n):
                temp=queue.pop(0)
                if temp.left:
                    queue.append(temp.left)
                if temp.right:
                    queue.append(temp.right)
                if i==0:
                    res.append(temp.data)
        return res
    def right_view(self):
        queue=[self.root]
        res=[]
        while queue:
            n=len(queue)
            for i in range(n):
                temp=queue.pop(0)
                if temp.left:
                    queue.append(temp.left)
                if temp.right:
                    queue.append(temp.right)
                if i==n-1:
                    res.append(temp.data)
        return res
 
obj=Tree()
obj.insert(20)
obj.insert(10)
obj.insert(7)
obj.insert(27)
obj.insert(34)
obj.insert(3)
obj.insert(9)
obj.insert(25)
obj.insert(18)
obj.insert(23)
obj.insert(22)
obj.inorder_traversal(obj.root)
print()
print ( obj.level_order_traversal() )
obj.inorder_traversal(obj.root)
print()
print(obj.left_view())
print(obj.right_view())"""
